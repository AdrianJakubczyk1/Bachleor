<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ScientificDataApp Performance Plan (JMeter)" enabled="true">
      <stringProp name="TestPlan.comments">End-to-end plan for Spring Boot + Hazelcast app. Runs thread groups consecutively. Edit variables below as needed.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_PROTO" elementType="Argument">
            <stringProp name="Argument.name">BASE_PROTO</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_HOST" elementType="Argument">
            <stringProp name="Argument.name">BASE_HOST</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_PORT" elementType="Argument">
            <stringProp name="Argument.name">BASE_PORT</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">teacher1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">password1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="POSTS_MAX" elementType="Argument">
            <stringProp name="Argument.name">POSTS_MAX</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLASSES_MAX" elementType="Argument">
            <stringProp name="Argument.name">CLASSES_MAX</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="PCT_PUBLIC" elementType="Argument">
            <stringProp name="Argument.name">PCT_PUBLIC</stringProp>
            <stringProp name="Argument.value">70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCT_STUDENT" elementType="Argument">
            <stringProp name="Argument.name">PCT_STUDENT</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PCT_TEACHER" elementType="Argument">
            <stringProp name="Argument.name">PCT_TEACHER</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="TG1_THREADS" elementType="Argument">
            <stringProp name="Argument.name">TG1_THREADS</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TG1_RAMP" elementType="Argument">
            <stringProp name="Argument.name">TG1_RAMP</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TG1_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TG1_DURATION</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>

          <elementProp name="TG2_THREADS" elementType="Argument">
            <stringProp name="Argument.name">TG2_THREADS</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TG2_RAMP" elementType="Argument">
            <stringProp name="Argument.name">TG2_RAMP</stringProp>
            <stringProp name="Argument.value">120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TG2_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TG2_DURATION</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>

      <!-- HTTP Defaults -->
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${BASE_HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${BASE_PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${BASE_PROTO}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <boolProp name="HTTPSampler.image_parser">false</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>

      <!-- Cookies & Cache -->
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
      </CacheManager>
      <hashTree/>

      <!-- Headers -->
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">JMeter</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>

      <!-- Random Variables -->
      <RandomVariableConfig guiclass="RandomVariableConfigGui" testclass="RandomVariableConfig" testname="Random POST_ID (1..${POSTS_MAX})" enabled="true">
        <stringProp name="minimum">1</stringProp>
        <stringProp name="maximum">${POSTS_MAX}</stringProp>
        <stringProp name="variableName">POST_ID</stringProp>
        <stringProp name="format"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="seed"></stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="RandomVariableConfigGui" testclass="RandomVariableConfig" testname="Random CLASS_ID (1..${CLASSES_MAX})" enabled="true">
        <stringProp name="minimum">1</stringProp>
        <stringProp name="maximum">${CLASSES_MAX}</stringProp>
        <stringProp name="variableName">CLASS_ID</stringProp>
        <stringProp name="format"></stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="seed"></stringProp>
      </RandomVariableConfig>
      <hashTree/>

      <!-- ===== Thread Group 1: Public Browse (Unauthenticated) ===== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Public Browse (Unauthenticated)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${TG1_THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${TG1_RAMP}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TG1_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX - Public Browse" enabled="true">
          <boolProp name="TransactionController.includeTimers">true</boolProp>
          <boolProp name="TransactionController.perThread">true</boolProp>
          <boolProp name="TransactionController.generateParentSample">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /posts" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/posts</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time (100-1000ms)" enabled="true">
            <stringProp name="RandomTimer.range">900</stringProp>
            <stringProp name="ConstantTimer.delay">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /posts/${POST_ID}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/posts/${POST_ID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>

      </hashTree>

      <!-- ===== Thread Group 2: Authenticated Journeys (Teacher) ===== -->
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Authenticated Journeys (Teacher)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">-1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${TG2_THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${TG2_RAMP}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${TG2_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>

        <!-- Login once per VU -->
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login (Once Only)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Extractor - CSRF (login)" enabled="true">
              <stringProp name="HtmlExtractor.refname">CSRF</stringProp>
              <stringProp name="HtmlExtractor.expr">input[name=_csrf]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.default">MISSING_CSRF</stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>

          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_csrf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_csrf</stringProp>
                  <stringProp name="Argument.value">${CSRF}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>

        <!-- Mixed flows with percentages -->
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Public Browse ${PCT_PUBLIC}%" enabled="true">
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <intProp name="ThroughputController.style">1</intProp>
          <stringProp name="ThroughputController.percent">${PCT_PUBLIC}</stringProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX - Public Browse (auth)" enabled="true">
            <boolProp name="TransactionController.includeTimers">true</boolProp>
            <boolProp name="TransactionController.perThread">true</boolProp>
            <boolProp name="TransactionController.generateParentSample">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /posts" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/posts</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time (100-1000ms)" enabled="true">
              <stringProp name="RandomTimer.range">900</stringProp>
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /posts/${POST_ID}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/posts/${POST_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>

        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Student Actions ${PCT_STUDENT}%" enabled="true">
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <intProp name="ThroughputController.style">1</intProp>
          <stringProp name="ThroughputController.percent">${PCT_STUDENT}</stringProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX - Comment on a Post" enabled="true">
            <boolProp name="TransactionController.includeTimers">true</boolProp>
            <boolProp name="TransactionController.perThread">true</boolProp>
            <boolProp name="TransactionController.generateParentSample">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /posts/${POST_ID} (for CSRF)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/posts/${POST_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Extractor - CSRF (comment)" enabled="true">
                <stringProp name="HtmlExtractor.refname">CSRF_POST</stringProp>
                <stringProp name="HtmlExtractor.expr">input[name=_csrf]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.default">MISSING_CSRF</stringProp>
              </HtmlExtractor>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time (100-1000ms)" enabled="true">
              <stringProp name="RandomTimer.range">900</stringProp>
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /posts/${POST_ID}/comments" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="text" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">text</stringProp>
                    <stringProp name="Argument.value">Perf test comment at ${__time(Y-M-d HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="_csrf" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_csrf</stringProp>
                    <stringProp name="Argument.value">${CSRF_POST}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/posts/${POST_ID}/comments</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>

        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Teacher Actions ${PCT_TEACHER}%" enabled="true">
          <boolProp name="ThroughputController.perThread">true</boolProp>
          <intProp name="ThroughputController.style">1</intProp>
          <stringProp name="ThroughputController.percent">${PCT_TEACHER}</stringProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
        </ThroughputController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TX - Create Post (Teacher)" enabled="true">
            <boolProp name="TransactionController.includeTimers">true</boolProp>
            <boolProp name="TransactionController.perThread">true</boolProp>
            <boolProp name="TransactionController.generateParentSample">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /teacher/posts/new (for CSRF)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/teacher/posts/new</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Extractor - CSRF (teacher)" enabled="true">
                <stringProp name="HtmlExtractor.refname">CSRF_TEACH</stringProp>
                <stringProp name="HtmlExtractor.expr">input[name=_csrf]</stringProp>
                <stringProp name="HtmlExtractor.attribute">value</stringProp>
                <stringProp name="HtmlExtractor.match_number">1</stringProp>
                <stringProp name="HtmlExtractor.default">MISSING_CSRF</stringProp>
              </HtmlExtractor>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time (100-1000ms)" enabled="true">
              <stringProp name="RandomTimer.range">900</stringProp>
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /teacher/posts/new" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="title" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">title</stringProp>
                    <stringProp name="Argument.value">Perf post ${__time(Y-M-d HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="content" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">content</stringProp>
                    <stringProp name="Argument.value">Automated post content</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="_csrf" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_csrf</stringProp>
                    <stringProp name="Argument.value">${CSRF_TEACH}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/teacher/posts/new</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>

      </hashTree>

      <!-- Results writer (lightweight). For rich HTML dashboard, use -e -o outside JMeter GUI. -->
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="JTL Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time><latency>true</latency><timestamp>true</timestamp><success>true</success>
            <label>true</label><code>true</code><message>false</message><threadName>true</threadName>
            <dataType>false</dataType><encoding>false</encoding><assertions>true</assertions>
            <subresults>false</subresults><responseData>false</responseData><samplerData>false</samplerData>
            <xml>false</xml><fieldNames>true</fieldNames><responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders><responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes><sentBytes>true</sentBytes><url>true</url><threadCounts>true</threadCounts>
            <idleTime>true</idleTime><connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">out/results_${__time(YMDHMS)}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>

    </hashTree>
  </hashTree>
</jmeterTestPlan>
