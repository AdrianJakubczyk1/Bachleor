Kryterium;Memcached;Redis;ApacheIgnite;Hazelcast
Architektura;"Sterowanie po stronie klienta; serwery nieświadome siebie nawzajem.";"Jednowątkowy rdzeń + wielowątkowe I/O; Wysoka dostępność: Sentinel. Skalowanie i partycjonowanie: Redis Cluster.";"Klaster peer-to-peer; wielopoziomowe przechowywanie (RAM + dysk).";"Elastyczny klaster peer-to-peer; może być osadzony w JVM aplikacji."
Model danych;"Prosty klucz–wartość .";"Klucz–wartość z bogatymi strukturami serwerowymi (listy, zbiory, hashe, zbiory uporządkowane, strumienie).";"klucz–wartość + pełny model relacyjny (SQL); przechowuje złożone obiekty.";"Zorientowany obiektowo; natywne obiekty Javy w rozproszonych kolekcjach (IMap, IQueue)."
Zapytania;"Tylko wyszukiwanie po kluczu.";"Rozbudowany zestaw operacji dla poszczególnych typów; indeksowanie wtórne w modułach, brak natywnego SQL.";"Pełny SQL działający w klastrze; transakcje ACID.";"Predykaty po polach obiektów; SQL działający w klastrze; logika wykonywana po stronie danych (EntryProcessor)."
Trwałość;"Brak.";"zrzut stanu(snapshot) RDB i/lub dziennik AOF (konfigurowalna trwałość).";"Natywna trwałość danych .";"MapStore (write-through do bazy danych) lub mechanizmy odzyskiwania danych."
dostępność i odporność na awarie;"Brak, zarządzana po stronie klienta.";"Replikacja z automatycznym failover (Sentinel) lub wbudowany w Cluster.";"Partycjonowanie z kopiami na węzłach; odtwarzanie węzłów.";"Partycjonowanie z kopiami synch./asynch.; automatyczny rebalance."
Integracja Java/Spring;"Biblioteki klienckie firm trzecich; integracja mniej płynna.";"Spring Data Redis (RedisTemplate, repozytoria); autokonfiguracja Spring Boot.";"Integracje Spring/Spring Data; autokonfiguracja.";"Natywne API Java; Spring Cache/Session, JCache; dobre wsparcie produkcyjne."